<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>STEVEN&#39;S BLOG</title>
  <subtitle>my blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-08T12:22:21.156Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Steven</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>智能指针</title>
    <link href="http://yoursite.com/2016/04/06/Android-Smarter-Pointers/"/>
    <id>http://yoursite.com/2016/04/06/Android-Smarter-Pointers/</id>
    <published>2016-04-06T07:41:35.568Z</published>
    <updated>2016-04-08T12:22:21.156Z</updated>
    
    <content type="html">&lt;p&gt;本文来自老罗《Android源代码情景分析》第三章–智能指针  阅读笔记&lt;br&gt;代码已整理在github上。&lt;br&gt;这章阅读无比通顺，一气呵成。&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;我们知道，在android中，我们通常使用引用技术来维护对象的生命周期。&lt;strong&gt;智能指针&lt;/strong&gt;正是一种能够自动维护对象的引用计数的技术。特别说明，智能指针是&lt;strong&gt;对象&lt;/strong&gt;，而不是指针，它引用了一个实际使用的对象，并且在它(智能指针)构造时，增加引用对象的计数，在它析构时，自动减少引用对象的计数。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h5 id=&quot;引用依赖&quot;&gt;&lt;a href=&quot;#引用依赖&quot; class=&quot;headerlink&quot; title=&quot;引用依赖&quot;&gt;&lt;/a&gt;引用依赖&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;在使用GC时，最经典的问题就是它一次只能收集一个对象所占用的对象。那就会存在引用依赖关系，比如A/B互相引用，就算A/B都想释放，却都因为对方引用着自己而无法释放。&lt;br&gt;因此，android采用强引用和弱引用计数两种方法来解决问题。它采用轻量级指针(Light Pointer),强指针(Strong Pointer),弱指针(Weak Pointer)来进行技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总结一下，所有想要实现引用计数的类(也就是我们自己定义的)，都要继承于一个公共类。至于这个公共类是啥，后面再说(●’◡’●)。&lt;/p&gt;
&lt;h4 id=&quot;轻量级指针&quot;&gt;&lt;a href=&quot;#轻量级指针&quot; class=&quot;headerlink&quot; title=&quot;轻量级指针&quot;&gt;&lt;/a&gt;轻量级指针&lt;/h4&gt;&lt;p&gt;在LP中，公共类就是LightRefBase类。在这个公共类中，只有一个成员变量mCount,用来描述对象的引用计数值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;incStrong(): 增加计数&lt;/li&gt;
&lt;li&gt;decStrong():减少计数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;incStrong&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* id)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     android_atomic_inc(&amp;amp;mCount);&lt;span class=&quot;comment&quot;&gt;//原子操作，递增引用计数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;decStrong&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* id)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (android_atomic_dec(&amp;amp;mCount) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//返回递减前的计数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; T*&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//删除对象，T是啥后面解释。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;实现类sp&quot;&gt;&lt;a href=&quot;#实现类sp&quot; class=&quot;headerlink&quot; title=&quot;实现类sp&quot;&gt;&lt;/a&gt;实现类sp&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sp(T* other);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sp(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sp&amp;lt;T&amp;gt;&amp;amp; other);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是类sp的构造函数。类sp是干嘛的呢？其实它就是轻量级指针的实现类。前面的LightRefBase可以看成是我们自己定义的类的父类(也就是前面说的公共类)。而sp其实就是智能指针，所以才需要一个模板参数T，表示引用了一个实际使用的对象。&lt;/p&gt;
&lt;p&gt;看下面构造函数的具体实现可以看到,sp有一个成员变量m_ptr,它指向一个实际使用的对象，然后在sp构造时，调用m_ptr-&amp;gt;incStrong，其实就是调用实际对象的incStrong()，增加引用计数。而析构时则减少计数。这样就完美的和我们前面说的对应了起来。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sp&amp;lt;T&amp;gt;::sp(T* other)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    : m_ptr(other)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (other) other-&amp;gt;incStrong(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sp&amp;lt;T&amp;gt;::sp(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sp&amp;lt;T&amp;gt;&amp;amp; other)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    : m_ptr(other.m_ptr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (m_ptr) m_ptr-&amp;gt;incStrong(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;强指针&quot;&gt;&lt;a href=&quot;#强指针&quot; class=&quot;headerlink&quot; title=&quot;强指针&quot;&gt;&lt;/a&gt;强指针&lt;/h4&gt;&lt;p&gt;在强指针中，公共类即为RefBase类。与轻量级不同的是，它不是使用mCount整数来维护计数，而是定义了一个新的类weakref_impl。并命名为mRefs来描述引用计数。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;friend&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; weakref_type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; weakref_impl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RefBase(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; RefBase&amp;amp; o);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RefBase&amp;amp;  &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;=(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; RefBase&amp;amp; o);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    weakref_impl* &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mRefs;&lt;span class=&quot;comment&quot;&gt;//后面要用到~&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以下是weakref_impl的定义，可以看到它继承于weakref_type。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; RefBase::weakref_impl : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; RefBase::weakref_type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int32_t&lt;/span&gt;    mStrong;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int32_t&lt;/span&gt;    mWeak;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RefBase* &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;      mBase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int32_t&lt;/span&gt;    mFlags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Destroyer*          mDestroyer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; !DEBUG_REFS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    weakref_impl(RefBase* base)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        : mStrong(INITIAL_STRONG_VALUE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        , mWeak(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        , mBase(base)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        , mFlags(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        , mDestroyer(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addStrongRef&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* &lt;span class=&quot;comment&quot;&gt;/*id*/&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeStrongRef&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* &lt;span class=&quot;comment&quot;&gt;/*id*/&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addWeakRef&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* &lt;span class=&quot;comment&quot;&gt;/*id*/&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeWeakRef&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* &lt;span class=&quot;comment&quot;&gt;/*id*/&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printRefs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;trackMe&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt; .....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上述代码中,weakref_impl有四个成员变量。其中mStrong维护强引用计数，mWeak引用弱引用计数。mBase指向实际对象。weakref_type作为父类，提供了成员函数incWeak,decWeak,attemptIncStrong,attemptIncWeak等接口，具体实现都由weakref_impl去负责。&lt;/p&gt;
&lt;p&gt;前面没有提到最后一个成员变量mFlags，它用来描述对象的生命周期控制方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0:代表生命周期只受强引用计数影响&lt;/li&gt;
&lt;li&gt;OBJECT_LIFETIME_WEAK 代表同时受强引用与弱引用计数影响&lt;/li&gt;
&lt;li&gt;OBJECT_LIFETIME_FOREVER 代表不受任何影响&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码中还有宏DEBUG_REFS,代表是调试还是非调试版本。所以else后面代码就不研究了。&lt;/p&gt;
&lt;p&gt;总结一下，我们自己定义的对象继承于RefBase，RefBase中有一个weakref_impl对象，继承于weakref_type，负责维护计数。&lt;/p&gt;
&lt;h5 id=&quot;实现类sp-1&quot;&gt;&lt;a href=&quot;#实现类sp-1&quot; class=&quot;headerlink&quot; title=&quot;实现类sp&quot;&gt;&lt;/a&gt;实现类sp&lt;/h5&gt;&lt;p&gt;强引用计数的实现类依旧为sp。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sp&amp;lt;T&amp;gt;::sp(T* other)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    : m_ptr(other)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (other) other-&amp;gt;incStrong(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sp&amp;lt;T&amp;gt;::sp(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sp&amp;lt;T&amp;gt;&amp;amp; other)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    : m_ptr(other.m_ptr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (m_ptr) m_ptr-&amp;gt;incStrong(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以这里incStrong,调用的实际是对象的incStrong。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; RefBase::incStrong(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* id) &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    weakref_impl* &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; refs = mRefs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    refs-&amp;gt;addWeakRef(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    refs-&amp;gt;incWeak(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    refs-&amp;gt;addStrongRef(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int32_t&lt;/span&gt; c = android_atomic_inc(&amp;amp;refs-&amp;gt;mStrong);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOG_ASSERT(c &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;incStrong() called on %p after last strong ref&quot;&lt;/span&gt;, refs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; PRINT_REFS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOGD(&lt;span class=&quot;string&quot;&gt;&quot;incStrong of %p from %p: cnt=%d\n&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, id, c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c != INITIAL_STRONG_VALUE)  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android_atomic_add(-INITIAL_STRONG_VALUE, &amp;amp;refs-&amp;gt;mStrong);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const_cast&lt;/span&gt;&amp;lt;RefBase*&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)-&amp;gt;onFirstRef();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前面提到mRefs其实就是weakref_impl对象,所以先调用它的incWeak()函数，增加弱引用计数。&lt;strong&gt;因为增强了强的，弱的也一定增加&lt;/strong&gt;！之后第七行再增加强引用计数。然后如果发现他是第一次被强指针引用，则调用对象的onFirstRef()函数。这个函数需要子类自己实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;incWeak()&lt;br&gt;其实调用的weakref_impl的父类weakref_type的函数实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; RefBase::weakref_type::incWeak(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    weakref_impl* &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; impl = &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&amp;lt;weakref_impl*&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    impl-&amp;gt;addWeakRef(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int32_t&lt;/span&gt; c = android_atomic_inc(&amp;amp;impl-&amp;gt;mWeak);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOG_ASSERT(c &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;incWeak called on %p after last weak ref&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;回到之前的incStrong函数,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;#define  INITIAL_STRONG_VALUE (1&amp;lt;&amp;lt;28)&lt;br&gt;因为INITIAL_STRONG初始define不为0,加1后不为0，因此&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android_atomic_add(-INITIAL_STRONG_VALUE, &amp;amp;refs-&amp;gt;mStrong);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把它调整为1。&lt;br&gt;至于为什么要这么做，后面会有解释。&lt;/p&gt;
&lt;p&gt;析构类似,调RefBase-&amp;gt;decStrong():&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; RefBase::decStrong(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* id) &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    weakref_impl* &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; refs = mRefs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    refs-&amp;gt;removeStrongRef(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int32_t&lt;/span&gt; c = android_atomic_dec(&amp;amp;refs-&amp;gt;mStrong);&lt;span class=&quot;comment&quot;&gt;//首先减少强引用计数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; PRINT_REFS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOGD(&lt;span class=&quot;string&quot;&gt;&quot;decStrong of %p from %p: cnt=%d\n&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, id, c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOG_ASSERT(c &amp;gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;decStrong() called on %p too many times&quot;&lt;/span&gt;, refs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//看是否该对象强引用计数为0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const_cast&lt;/span&gt;&amp;lt;RefBase*&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)-&amp;gt;onLastStrongRef(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((refs-&amp;gt;mFlags&amp;amp;OBJECT_LIFETIME_WEAK) != OBJECT_LIFETIME_WEAK) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//如果生命周期只受强的控制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (refs-&amp;gt;mDestroyer) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                refs-&amp;gt;mDestroyer-&amp;gt;destroy(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//删除对象，进入对象的析构函数，后面的代码也不会执行了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    refs-&amp;gt;removeWeakRef(id);&lt;span class=&quot;comment&quot;&gt;//忽略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    refs-&amp;gt;decWeak(id);&lt;span class=&quot;comment&quot;&gt;//减少弱引用计数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里我懵逼了很久，有点乱。其实是这样:先看强引用计数是否为0并且只受强引用记数控制生命周期,是的话就删除对象，进入析构函数;在析构函数中(代码见下)，如果弱引用记数也为0，则删除mRefs对象;如果强引用记数不为0或者还受弱引用记数控制生命周期，则要减少弱引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;析构函数:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RefBase::~RefBase()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((mRefs-&amp;gt;mFlags &amp;amp; OBJECT_LIFETIME_WEAK) == OBJECT_LIFETIME_WEAK) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mRefs-&amp;gt;mWeak == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; mRefs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果弱引用计数为0，则删除mRefs 即weakref_impl对象。因为弱引用计数一定大于强引用，在强引用计数为0时，弱引用不一定为0，所以只能删除对象，而不能删除weakref_impl，因为其他弱指针还会通过该对象来引用实际的对象。&lt;/p&gt;
&lt;p&gt;之后再分析decWeek函数，这个就比较复杂了。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; RefBase::weakref_type::decWeak(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    weakref_impl* &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; impl = &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&amp;lt;weakref_impl*&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    impl-&amp;gt;removeWeakRef(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int32_t&lt;/span&gt; c = android_atomic_dec(&amp;amp;impl-&amp;gt;mWeak);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOG_ASSERT(c &amp;gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;decWeak called on %p too many times&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c != &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((impl-&amp;gt;mFlags&amp;amp;OBJECT_LIFETIME_WEAK) != OBJECT_LIFETIME_WEAK) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (impl-&amp;gt;mStrong == INITIAL_STRONG_VALUE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (impl-&amp;gt;mBase) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (impl-&amp;gt;mDestroyer) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    impl-&amp;gt;mDestroyer-&amp;gt;destroy(impl-&amp;gt;mBase);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; impl-&amp;gt;mBase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// LOGV(&quot;Freeing refs %p of old RefBase %p\n&quot;, this, impl-&amp;gt;mBase);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; impl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        impl-&amp;gt;mBase-&amp;gt;onLastWeakRef(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((impl-&amp;gt;mFlags&amp;amp;OBJECT_LIFETIME_FOREVER) != OBJECT_LIFETIME_FOREVER) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (impl-&amp;gt;mBase) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (impl-&amp;gt;mDestroyer) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    impl-&amp;gt;mDestroyer-&amp;gt;destroy(impl-&amp;gt;mBase);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; impl-&amp;gt;mBase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;比较复杂的原因是，如果删除弱引用计数后，为0，&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文来自老罗《Android源代码情景分析》第三章–智能指针  阅读笔记&lt;br&gt;代码已整理在github上。&lt;br&gt;这章阅读无比通顺，一气呵成。&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;我们知道，在android中，我们通常使用引用技术来维护对象的生命周期。&lt;strong&gt;智能指针&lt;/strong&gt;正是一种能够自动维护对象的引用计数的技术。特别说明，智能指针是&lt;strong&gt;对象&lt;/strong&gt;，而不是指针，它引用了一个实际使用的对象，并且在它(智能指针)构造时，增加引用对象的计数，在它析构时，自动减少引用对象的计数。&lt;br&gt;
    
    </summary>
    
      <category term="Android Framework" scheme="http://yoursite.com/categories/Android-Framework/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="阅读笔记" scheme="http://yoursite.com/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hook详解(一)</title>
    <link href="http://yoursite.com/2016/04/05/Android-Hook-One/"/>
    <id>http://yoursite.com/2016/04/05/Android-Hook-One/</id>
    <published>2016-04-05T05:25:44.293Z</published>
    <updated>2016-04-08T12:22:25.687Z</updated>
    
    <content type="html">&lt;p&gt;写android hook网上到处都是，但是作为菜鸟的我要不看不懂原理，要不就不知道到底应该怎么使用T T，这篇文章把网上所有的都整理了一下，给自己一点参考吧。&lt;/p&gt;
&lt;p&gt;所有代码详见github。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h3 id=&quot;Hook-From-蒸米&quot;&gt;&lt;a href=&quot;#Hook-From-蒸米&quot; class=&quot;headerlink&quot; title=&quot;Hook From 蒸米&quot;&gt;&lt;/a&gt;Hook From &lt;a href=&quot;http://drops.wooyun.org/tips/9300&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;蒸米&lt;/a&gt;&lt;/h3&gt;&lt;h5 id=&quot;使用方法1&quot;&gt;&lt;a href=&quot;#使用方法1&quot; class=&quot;headerlink&quot; title=&quot;使用方法1:&quot;&gt;&lt;/a&gt;使用方法1:&lt;/h5&gt;&lt;p&gt;将target.c文件，hook1.c文件拷贝至jni文件夹,编写Android.mk文件。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LOCAL_PATH := $(call my-dir)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;include $(CLEAR_VARS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOCAL_MODULE    := target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOCAL_SRC_FILES := target.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;include $(BUILD_EXECUTABLE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;include $(CLEAR_VARS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOCAL_MODULE    := hook1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOCAL_SRC_FILES := hook1.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;include $(BUILD_EXECUTABLE)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;进入cmd,使用ndk-build编译，就会生成target,hook1文件。然后&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb push target /data/local/tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb shell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd /data/local/tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chmod &lt;span class=&quot;number&quot;&gt;777&lt;/span&gt; ./target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./target&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就能看见target已经开始运行了。&lt;br&gt;然后ps得到target的进程号,再按照上面一样的方法把hook1文件拷贝至手机，&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./hook1 pid             &lt;span class=&quot;comment&quot;&gt;//这里的pid改成之前得到的进程号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;既可以看到target已经被hook劫持。hook1-hook3均按此方法使用即可。&lt;/p&gt;
&lt;h5 id=&quot;hook1-输出系统调用号与参数&quot;&gt;&lt;a href=&quot;#hook1-输出系统调用号与参数&quot; class=&quot;headerlink&quot; title=&quot;#hook1 输出系统调用号与参数&quot;&gt;&lt;/a&gt;#hook1 输出系统调用号与参数&lt;/h5&gt;&lt;p&gt;首先，PTRACE_ATTACH上target进程，PTRACE_ATTACH与PTRACE_TRACEME最大的区别在于，后者并不会使子进程停止，只有在进行exec系统调用的时候才会导致子进程暂停;而ATTACH会使子进程立马暂停下来。&lt;br&gt;PTRACE_SYSCALL是使子进程继续运行，知道在它进行系统调用之前或之后再暂停下来。&lt;br&gt;所以这里在ATTACH后，立马SYSCALL使target继续运行，然后循环wait等target暂停进行劫持。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;arm中系统调用由SWI实现,即软件中断(Software Interrupt),在请求系统服务时造成的中断,由SWI指令造成异常从而切入特权模式,从而允许非特权模式访问特权模式的函数.&lt;br&gt;ARM中有两种系统调用方式: OABI(old application binary interface)和EABI(extended application binary interface).见(内核源码arch/arm/kernel/entry-common.S文件).&lt;br&gt;对于OABI: 通过跟随在swi指令后的调用号来进行. 1101 1111 vvvv vvvv – SWI immed_8 (Thumb指令)格式)&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;swi (&lt;span class=&quot;meta&quot;&gt;#num | 0x900000) (0x900000是个magic值)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于EABI: 调用号存放在r7中. 1110 1111 0000 0000 (ef000000)– SWI 0 (Thumb指令格式)&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mov r7, &lt;span class=&quot;meta&quot;&gt;#num&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;swi &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以下面这个就好理解啦&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scno = ptrace(PTRACE_PEEKTEXT, pid, (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)(regs-&amp;gt;ARM_pc - &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;), &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//[pc-4],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(scno == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (scno == &lt;span class=&quot;number&quot;&gt;0xef000000&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       scno = regs-&amp;gt;ARM_r7;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((scno &amp;amp; &lt;span class=&quot;number&quot;&gt;0x0ff00000&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;0x0f900000&lt;/span&gt;) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//关键是看是否是900000(magic值)        &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       scno &amp;amp;= &lt;span class=&quot;number&quot;&gt;0x000fffff&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; scno;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;hook2-将参数字符串进行反转&quot;&gt;&lt;a href=&quot;#hook2-将参数字符串进行反转&quot; class=&quot;headerlink&quot; title=&quot;#hook2 将参数字符串进行反转&quot;&gt;&lt;/a&gt;#hook2 将参数字符串进行反转&lt;/h5&gt;&lt;p&gt;没啥好解释的。&lt;/p&gt;
&lt;h5 id=&quot;hook3-动态执行libc-so中的sleep函数&quot;&gt;&lt;a href=&quot;#hook3-动态执行libc-so中的sleep函数&quot; class=&quot;headerlink&quot; title=&quot;#hook3 动态执行libc.so中的sleep函数&quot;&gt;&lt;/a&gt;#hook3 动态执行libc.so中的sleep函数&lt;/h5&gt;&lt;p&gt;可以看到hook3在ATTACH后没有syscall或continue，直接就开始hook。&lt;br&gt;get_remote_addr，其实就是在Libc.so中有一个sleep库函数，我要计算出它在so文件中的基址，然后再加上libc.so运行时的地址即可。&lt;/p&gt;
&lt;p&gt;我在得到target的reg后，将arm_pc改成sleep函数的地址，然后setreg，再PTRACE_CONTINUE使target继续运行，那么target实际运行的就是sleep函数。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; stat = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    waitpid(pid, &amp;amp;stat, WUNTRACED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (stat != &lt;span class=&quot;number&quot;&gt;0xb7f&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ptrace_continue(pid) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;error\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        waitpid(pid, &amp;amp;stat, WUNTRACED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;##### 关于WUNTRACED&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;WUNTRACED告诉waitpid，如果子进程进入暂停状态，那么就立即返回。如果是被ptrace的子进程，**那么即使不提供WUNTRACED参数，也会在子进程进入暂停状态的时候立即返回**。对于使用ptrace_cont运行的子进程，它会在&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;种情况下进入暂停状态：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;①下一次系统调用；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;②子进程退出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;③**子进程的执行发生错误。这里的&lt;span class=&quot;number&quot;&gt;0xb7f&lt;/span&gt;就表示子进程进入了暂停状态，且发送的错误信号为&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;(SIGSEGV)**，它表示试图访问未分配给自己的内存, 或试图往没有写权限的内存地址写数据。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;那么什么时候会发生这种错误呢？显然，当子进程执行完注入的函数后，由于我们在前面设置了regs-&amp;gt;ARM_lr = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;，它就会返回到&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;地址处继续执行，这样就会产生SIGSEGV了！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;再说一下stat的值：高&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;字节用于表示导致子进程的退出或暂停状态信号值，低&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;字节表示子进程是退出(&lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;)还是暂停(&lt;span class=&quot;number&quot;&gt;0x7f&lt;/span&gt;)状态。&lt;span class=&quot;number&quot;&gt;0xb7f&lt;/span&gt;就表示子进程为暂停状态，导致它暂停的信号量为&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;即sigsegv错误。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```&lt;span class=&quot;function&quot;&gt;c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(regs-&amp;gt;ARM_pc &amp;amp; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* thumb */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        regs-&amp;gt;ARM_pc &amp;amp;= (~&lt;span class=&quot;number&quot;&gt;1u&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        regs-&amp;gt;ARM_cpsr |= CPSR_T_MASK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* arm */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        regs-&amp;gt;ARM_cpsr &amp;amp;= ~CPSR_T_MASK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;指令使用目标地址值的bit[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]来确定目标地址的指令类型。bit[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]的值为&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;时，目标程序为Thumb指令；bit[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]值为&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;时，目标程序为ARM指令。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CPSR寄存器 第六位为T。T=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,代表为ARM指令，T为&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,代表为Thumb指令。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;##### 使用方法2：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hook4开始要使用自己写的.so文件，所以把inject.c拷贝到jni文件下，然后编写Android.mk生成动态库文件。之后把libinject.so push 到/data/local/tmp下。之后运行target，再./hook4就可以进行劫持。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	include $(CLEAR_VARS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	LOCAL_MODULE    := inject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	LOCAL_SRC_FILES := inject.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	LOCAL_LDLIBS := -llog &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	include $(BUILD_SHARED_LIBRARY)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;hook4-动态加载so并执行自定义函数&quot;&gt;&lt;a href=&quot;#hook4-动态加载so并执行自定义函数&quot; class=&quot;headerlink&quot; title=&quot;#hook4: 动态加载so并执行自定义函数&quot;&gt;&lt;/a&gt;#hook4: 动态加载so并执行自定义函数&lt;/h5&gt;&lt;p&gt;保存当前寄存器的状态 -&amp;gt; 获取目标程序的mmap, dlopen, dlsym, dlclose 地址 -&amp;gt; 调用mmap分配一段内存空间用来保存参数信息 –&amp;gt; 调用dlopen加载so文件 -&amp;gt; 调用dlsym找到目标函数地址 -&amp;gt; 使用ptrace_call执行目标函数 -&amp;gt; 调用 dlclose 卸载so文件 -&amp;gt; 恢复寄存器的状态。&lt;/p&gt;
&lt;p&gt;这里mmap我一开始一脸懵逼，没学过操作系统真的很心累啊T T。大神之所以使用mmap，是为了共享参数。在target中新增一块内存地址，然后把各种函数参数都写到这块内存里面，之后进行调用就很方便了。&lt;/p&gt;
&lt;p&gt;这里我们不光使用printf()还使用了android debug的函数LOGD()用来输出调试结果。所以在编译时我们需要加上LOCAL_LDLIBS := -llog。&lt;/p&gt;
&lt;h5 id=&quot;hook5-函数挂钩实现native层hook&quot;&gt;&lt;a href=&quot;#hook5-函数挂钩实现native层hook&quot; class=&quot;headerlink&quot; title=&quot;#hook5: 函数挂钩实现native层hook&quot;&gt;&lt;/a&gt;#hook5: 函数挂钩实现native层hook&lt;/h5&gt;&lt;p&gt;其实就是android-inline-hook。&lt;br&gt;这里依旧要拷贝.so文件至手机。&lt;br&gt;基本思想是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先利用hook4调用我们自己写的libinject2.so中的mzhengHook函数。所以hook5.c和hook4.c没啥区别，就少了个dlclose进行卸载。所以主要逻辑代码都在libinject2.so文件。&lt;/li&gt;
&lt;li&gt;在MzhengHook中,将target的前三句指令换成我们自己的函数。然后其实该进程就推出了,target函数继续运行。&lt;/li&gt;
&lt;li&gt;然而target运行时，其实运行的是我们.so文件中自定义的函数，所以该函数可以劫持参数改变参数等。&lt;/li&gt;
&lt;li&gt;改变完后，调用hook_precall()恢复target为正常,然后让pc指向它。&lt;/li&gt;
&lt;li&gt;如果想一直劫持，就调用hook_postcall()再替换指令即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再来看hook_direct函数。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hook_direct(&amp;amp;eph,hookaddr,my_sevenWeapons);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在main中调用hook_direct函数，其中hookaddr是我们要劫持的函数的地址，也就是target中的函数，my_sevenWeapons是我们要替换成的我们自己编写的函数，它存在于so文件中。eph是一个结构体&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;hook_t&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; jump[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; store[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; orig;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; patch;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先，因为我们要修改的是target中的代码段，这一般是不可写的，所以要用mprotect把区间改成可写。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然android有ASLR，但并没有PIE，所以program image是固定在0x8000这个地址的，因此我们用mprotect()函数将整个target代码段变成RWX，这样我们就能修改函数入口处的代码了。是否修改成功可以通过cat /proc/[pid]/maps查看。&amp;lt;我测了一下，的确代码段是从8000-a000&amp;gt;&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//modify function entry	&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h-&amp;gt;patch = (&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)hookf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h-&amp;gt;orig = addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h-&amp;gt;jump[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0xe59ff000&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// LDR pc, [pc, #0]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h-&amp;gt;jump[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = h-&amp;gt;patch;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h-&amp;gt;jump[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = h-&amp;gt;patch;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	h-&amp;gt;store[i] = ((&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;*)h-&amp;gt;orig)[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	((&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;*)h-&amp;gt;orig)[i] = h-&amp;gt;jump[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//cacheflush	&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hook_cacheflush((&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)h-&amp;gt;orig, (&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)h-&amp;gt;orig+&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(h-&amp;gt;jump));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;h-&amp;gt;patch 是我们自己写的函数地址。&lt;br&gt;h-&amp;gt;origin 是要hook的函数地址。&lt;br&gt;h-&amp;gt;jump&lt;br&gt;h-&amp;gt;store是将hook的函数的前三条语句保存下来。然后再把h-&amp;gt;jump放到h-&amp;gt;origin中，替换原函数的前三条语句。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;随后我们需要确定目标函数的地址，这个有两种方法。如果目标程序本身没有被strip的话，那些symbol都是存在的，因此可以使用dlopen()和dlsym()等方法来获取目标函数地址。但很多情况，目标程序都会被strip，特别是可以直接运行的二进制文件默认都会被直接strip。比如target中的sevenWeapons()这个函数名会在编译的时候去掉，所以我们使用dlsym()的话是无法找到这个函数的。这时候我们就需要使用ida或者objdump来定位一下目标函数的地址。&lt;/p&gt;
&lt;p&gt;我们把目标函数的第一条指令修改为 LDR pc, [pc, #0]，这条指令的意思是跳转到PC指针所指的地址，由于pc寄存器读出的值实际上是当前指令地址加8，所以我们把后面两处指令都保存为hook函数的地址，这样的话，我们就能控制PC跳转到hook函数的地址了。&lt;br&gt;最后我们再调用hook_cacheflush()这个函数来刷新一下指令的缓存。因为虽然前面的操作修改了内存中的指令，但有可能被修改的指令已经被缓存起来了，再执行的话，CPU可能会优先执行缓存中的指令，使得修改的指令得不到执行。所以我们需要使用一个隐藏的系统调用来刷新一下缓存。(这不仅让我想起了路由器中的sleep函数T T)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;hook-from-古河&quot;&gt;&lt;a href=&quot;#hook-from-古河&quot; class=&quot;headerlink&quot; title=&quot;hook from  古河&quot;&gt;&lt;/a&gt;hook from  &lt;a href=&quot;http://bbs.pediy.com/showthread.php?t=141355&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;古河&lt;a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;古河大大的hook其实就是前面的Hook4方法，利用自己写的.so文件的函数进行hook。当然一开始看他的代码非常心累，还用到了shellcode.s汇编来进行利用。其实说到底他只是把所有的函数地址都现在shellcode.s中定义好，然后在.so文件中作为外部变量进行引用，所有例如dlpen函数的实现也都放到汇编中罢了。&lt;/p&gt;
&lt;p&gt;主要关注&lt;strong&gt;inject_remote_process&lt;/strong&gt;函数。&lt;br&gt;例如，_dlopen_addr_s在shellcode.s中进行定义，然后在.so文件中extern进行外部引用。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;code_length = (&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;)&amp;amp;_inject_end_s - (&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;)&amp;amp;_inject_start_s;&lt;span class=&quot;comment&quot;&gt;//获取注入ShellCode代码指令的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dlopen_param1_ptr = local_code_ptr + code_length + &lt;span class=&quot;number&quot;&gt;0x20&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//本地为函数dlopen的第1个参数pathname变量申请内存空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dlsym_param2_ptr = dlopen_param1_ptr + MAX_PATH;&lt;span class=&quot;comment&quot;&gt;//本地为附加远程目标进程的寄存器状态值r0-r15(pc)的保存申请内存空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;saved_r0_pc_ptr = dlsym_param2_ptr + MAX_PATH;&lt;span class=&quot;comment&quot;&gt;//本地为附加远程目标进程的寄存器状态值r0-r15(pc)的保存申请内存空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inject_param_ptr = saved_r0_pc_ptr + MAX_PATH;  &lt;span class=&quot;comment&quot;&gt;//本地为附加远程目标进程的Hook函数的参数inject_param_ptr申请内存空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;_inject_start_s为汇编中定义的shellcode开始符号&lt;/p&gt;
&lt;p&gt;所以古河的做法是，用mmap申请一段内存空间，构造方法是:&lt;br&gt;shellcode+dlpen_param1+dlsym_param2+saved_ro_pc+inject_param&lt;br&gt;把上述构造的内容放到mmap申请得到的内存空间中。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* dlopen parameter 1: library name */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;strcpy&lt;/span&gt;( dlopen_param1_ptr, library_path );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_dlopen_param1_s = REMOTE_ADDR( dlopen_param1_ptr, local_code_ptr, remote_code_ptr );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG_PRINT( &lt;span class=&quot;string&quot;&gt;&quot;[+] _dlopen_param1_s: %x\n&quot;&lt;/span&gt;, _dlopen_param1_s );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然前面得到的_dlopen_param1_ptr都是在本地shellcode开始的地址。还要转换为放到mmap申请得到的内存空间后的remote_addr。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;memcpy&lt;/span&gt;( &amp;amp;regs, &amp;amp;original_regs, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(regs) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;regs.ARM_sp = (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)remote_code_ptr;&lt;span class=&quot;comment&quot;&gt;//修改附加远程目标进程的sp寄存器的值为ShellCode的注入地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;regs.ARM_pc = (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)remote_code_ptr;&lt;span class=&quot;comment&quot;&gt;//修改附加远程目标进程的pc寄存器的值为ShellCode的注入地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ptrace_setregs( target_pid, &amp;amp;regs );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ptrace_detach( target_pid );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;把sp ,pc都置为remote_code_ptr,然后detach使子进程开始运行shellcode。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;remote_code_ptr = map_base+&lt;span class=&quot;number&quot;&gt;0x3C00&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 这里就预留了0x3c00的空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里可以看到这句话的作用，因为sp也指向remote_addr，在注入代码之前一定得预留部分空间用作函数调用的栈空间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/jinzhuojun/article/details/9900105&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android中的so注入(inject)和挂钩(hook) - For both x86 and arm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网上也有大神实现了不用shellcode.s，直接在.so调call来进行hook的，大神还区分了i386和arm平台，对i386平台我就不多写了。&lt;/p&gt;
&lt;h4 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://kiya.space/2015/12/21/hook-syscall/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hook - Android ARM下的的so注入&lt;a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;写android hook网上到处都是，但是作为菜鸟的我要不看不懂原理，要不就不知道到底应该怎么使用T T，这篇文章把网上所有的都整理了一下，给自己一点参考吧。&lt;/p&gt;
&lt;p&gt;所有代码详见github。&lt;br&gt;
    
    </summary>
    
      <category term="android逆向" scheme="http://yoursite.com/categories/android%E9%80%86%E5%90%91/"/>
    
    
      <category term="Hook" scheme="http://yoursite.com/tags/Hook/"/>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
</feed>
